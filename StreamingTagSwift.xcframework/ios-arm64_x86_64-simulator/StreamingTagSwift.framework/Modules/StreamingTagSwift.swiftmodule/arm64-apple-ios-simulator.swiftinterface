// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
// swift-module-flags: -target arm64-apple-ios10.2-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name StreamingTagSwift
import Foundation
import Security
@_exported import StreamingTagSwift
import Swift
import SystemConfiguration
import UIKit
public enum StreamingType : Swift.String, Swift.Codable {
  case replay
  case live
  case liveTimeShifting
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension Collection {
  public subscript(safe index: Self.Index) -> Self.Iterator.Element? {
    get
  }
}
@_hasMissingDesignatedInitializers public class TagConfigurationValidator {
  @objc deinit
}
public enum AuthResponseType : Swift.String, Swift.Codable {
  case Generated
  case Provided
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ReplayStreamingTagger : StreamingTagSwift.StreamingTagger {
  public func notifyEvent(eventState: StreamingTagSwift.EventState)
  public func notifyEvent(eventState: StreamingTagSwift.EventState, position: Swift.Int)
  public func setMediaLength(mediaLength: Swift.Int) -> Self
  @objc deinit
}
public enum ConsentType : Swift.String, Swift.Codable {
  case optout
  case optin
  case exempted
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum EventState : Swift.Int, Swift.Codable {
  case play
  case pause
  case stop
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum AuthAccess : Swift.String, Swift.Codable {
  case full
  case restricted
  case denied
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ReachabilityType : Swift.String {
  case wifi
  case gsm
  case notReachable
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum Implementation : Swift.String, Swift.Codable {
  case manual
  case automatic
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class LiveStreamingTagger : StreamingTagSwift.StreamingTagger {
  public func notifyEvent(eventState: StreamingTagSwift.EventState)
  @objc deinit
}
public enum EventType : Swift.String, Swift.Codable {
  case polling
  case state
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class Tag : ObjectiveC.NSObject {
  @objc public init(enableUserID: Swift.Bool = false, deviceID: Swift.String?)
  @objc convenience override dynamic public init()
  @objc convenience public init(enableUserID: Swift.Bool = false)
  public static func getVersion() -> Swift.String
  public static func getTagName() -> Swift.String
  public func liveStreamingTaggerBuilder() -> StreamingTagSwift.LiveStreamingTaggerBuilder
  public func replayStreamingTaggerBuilder() -> StreamingTagSwift.ReplayStreamingTaggerBuilder
  public func liveProbeStreamingTaggerBuilder() -> StreamingTagSwift.LiveProbeStreamingTaggerBuilder
  public func replayProbeStreamingTaggerBuilder() -> StreamingTagSwift.ReplayProbeStreamingTaggerBuilder
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class LiveProbeStreamingTagger : StreamingTagSwift.StreamingTagger {
  public func stop()
  public func disable()
  public func snooze()
  public func wakeup()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class LiveStreamingTaggerBuilder : StreamingTagSwift.StreamingTaggerBuilder {
  public func withTimeshiftingEnabled() -> Self
  public func build() throws -> StreamingTagSwift.LiveStreamingTagger
  @objc deinit
}
@_hasMissingDesignatedInitializers public class StreamingTaggerBuilder {
  public func withSerial(serial: Swift.String) -> Self
  public func withConsentType(consentType: StreamingTagSwift.ConsentType) -> Self
  public func withStreamName(streamName: Swift.String) -> Self
  public func withConsentString(consentString: Swift.String) -> Self
  public func withCast(isCasting: Swift.Bool) -> Self
  public func withStreamCategory(streamCategory: Swift.String) -> Self
  public func withMediaProvider(mediaProvider: Swift.String) -> Self
  public func withLevel1(level1: Swift.String) -> Self
  public func withLevel2(level2: Swift.String) -> Self
  public func withLevel3(level3: Swift.String) -> Self
  public func withLevel4(level4: Swift.String) -> Self
  public func withLevel5(level5: Swift.String) -> Self
  public func withAuthUrl(authUrl: Swift.String) -> Self
  public func withFallbackCollectUrl(fallbackCollectUrl: Swift.String) -> Self
  public func withMultiLevel1(multiLevel1: Swift.String) -> Self
  public func withMultiLevel2(multiLevel2: Swift.String) -> Self
  public func withMultiLevel3(multiLevel3: Swift.String) -> Self
  public func withMultiLevel4(multiLevel4: Swift.String) -> Self
  public func withMultiLevel5(multiLevel5: Swift.String) -> Self
  public func withMultiLevel6(multiLevel6: Swift.String) -> Self
  public func withMultiLevel7(multiLevel7: Swift.String) -> Self
  public func withMultiLevel8(multiLevel8: Swift.String) -> Self
  public func withMultiLevel9(multiLevel9: Swift.String) -> Self
  public func withMultiLevel10(multiLevel10: Swift.String) -> Self
  public func withMultiLevel11(multiLevel11: Swift.String) -> Self
  public func withMediaContentId(mediaContentId: Swift.String) -> Self
  public func withMediaDiffMode(mediaDiffMode: Swift.String) -> Self
  public func withMediaChannel(mediaChannel: Swift.String) -> Self
  public func withNetMeasurement(netMeasurement: Swift.String) -> Self
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ReplayStreamingTaggerBuilder : StreamingTagSwift.StreamingTaggerBuilder {
  public func withPositionCallback(positionCallback: @escaping () -> Swift.Int) -> Self
  public func withStreamLength(streamLength: Swift.Int) -> Self
  public func build() throws -> StreamingTagSwift.ReplayStreamingTagger
  @objc deinit
}
public enum ReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr, Swift.Int32)
  case failedToCreateWithHostname(Swift.String, Swift.Int32)
  case unableToSetCallback(Swift.Int32)
  case unableToSetDispatchQueue(Swift.Int32)
  case unableToGetFlags(Swift.Int32)
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
extension NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
public class eStatReachability {
  public typealias NetworkReachable = (StreamingTagSwift.eStatReachability) -> ()
  public typealias NetworkUnreachable = (StreamingTagSwift.eStatReachability) -> ()
  public enum Connection : Swift.CustomStringConvertible {
    @available(*, deprecated, renamed: "unavailable")
    case none
    case unavailable, wifi, cellular
    public var description: Swift.String {
      get
    }
    public static func == (a: StreamingTagSwift.eStatReachability.Connection, b: StreamingTagSwift.eStatReachability.Connection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: StreamingTagSwift.eStatReachability.NetworkReachable?
  public var whenUnreachable: StreamingTagSwift.eStatReachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: StreamingTagSwift.eStatReachability.Connection {
    get
  }
  public var connection: StreamingTagSwift.eStatReachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main)
  convenience public init(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  convenience public init(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  @objc deinit
}
extension eStatReachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ReplayProbeStreamingTaggerBuilder : StreamingTagSwift.ReplayStreamingTaggerBuilder {
  public func build() throws -> StreamingTagSwift.ReplayProbeStreamingTagger
  @objc deinit
}
@_hasMissingDesignatedInitializers public class StreamingTagger {
  @objc deinit
  public func setConsentString(consentString: Swift.String) -> Self
  public func setCast(isCasting: Swift.Bool) -> Self
  public func setMediaDiffMode(mediaDiffMode: Swift.String) -> Self
  public func setMediaContentId(mediaContentId: Swift.String) -> Self
  public func setMediaChannel(mediaChannel: Swift.String) -> Self
  public func setNetMeasurement(netMeasurement: Swift.String) -> Self
  public func setMultiLevel1(multiLevel1: Swift.String) -> Self
  public func setMultiLevel2(multiLevel2: Swift.String) -> Self
  public func setMultiLevel3(multiLevel3: Swift.String) -> Self
  public func setMultiLevel4(multiLevel4: Swift.String) -> Self
  public func setMultiLevel5(multiLevel5: Swift.String) -> Self
  public func setMultiLevel6(multiLevel6: Swift.String) -> Self
  public func setMultiLevel7(multiLevel7: Swift.String) -> Self
  public func setMultiLevel8(multiLevel8: Swift.String) -> Self
  public func setMultiLevel9(multiLevel9: Swift.String) -> Self
  public func setMultiLevel10(multiLevel10: Swift.String) -> Self
  public func setMultiLevel11(multiLevel11: Swift.String) -> Self
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class LiveProbeStreamingTaggerBuilder : StreamingTagSwift.StreamingTaggerBuilder {
  public func withPlayerStateCallback(playerStateCallback: @escaping () -> StreamingTagSwift.EventState) -> Self
  public func build() throws -> StreamingTagSwift.LiveProbeStreamingTagger
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ReplayProbeStreamingTagger : StreamingTagSwift.StreamingTagger {
  public func stop()
  public func disable()
  public func snooze()
  public func wakeup()
  public func setMediaLength(mediaLength: Swift.Int) -> Self
  @objc deinit
}
public enum TransmissionType : Swift.String {
  case COMPACT
  case DISCONNECTED
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class BehaviorBuilder {
  @objc deinit
}
extension StreamingTagSwift.StreamingType : Swift.Equatable {}
extension StreamingTagSwift.StreamingType : Swift.Hashable {}
extension StreamingTagSwift.StreamingType : Swift.RawRepresentable {}
extension StreamingTagSwift.AuthResponseType : Swift.Equatable {}
extension StreamingTagSwift.AuthResponseType : Swift.Hashable {}
extension StreamingTagSwift.AuthResponseType : Swift.RawRepresentable {}
extension StreamingTagSwift.ConsentType : Swift.Equatable {}
extension StreamingTagSwift.ConsentType : Swift.Hashable {}
extension StreamingTagSwift.ConsentType : Swift.RawRepresentable {}
extension StreamingTagSwift.EventState : Swift.Equatable {}
extension StreamingTagSwift.EventState : Swift.Hashable {}
extension StreamingTagSwift.EventState : Swift.RawRepresentable {}
extension StreamingTagSwift.AuthAccess : Swift.Equatable {}
extension StreamingTagSwift.AuthAccess : Swift.Hashable {}
extension StreamingTagSwift.AuthAccess : Swift.RawRepresentable {}
extension StreamingTagSwift.ReachabilityType : Swift.Equatable {}
extension StreamingTagSwift.ReachabilityType : Swift.Hashable {}
extension StreamingTagSwift.ReachabilityType : Swift.RawRepresentable {}
extension StreamingTagSwift.Implementation : Swift.Equatable {}
extension StreamingTagSwift.Implementation : Swift.Hashable {}
extension StreamingTagSwift.Implementation : Swift.RawRepresentable {}
extension StreamingTagSwift.EventType : Swift.Equatable {}
extension StreamingTagSwift.EventType : Swift.Hashable {}
extension StreamingTagSwift.EventType : Swift.RawRepresentable {}
extension StreamingTagSwift.eStatReachability.Connection : Swift.Equatable {}
extension StreamingTagSwift.eStatReachability.Connection : Swift.Hashable {}
extension StreamingTagSwift.TransmissionType : Swift.Equatable {}
extension StreamingTagSwift.TransmissionType : Swift.Hashable {}
extension StreamingTagSwift.TransmissionType : Swift.RawRepresentable {}
